name: RELEASE

# Trigger the workflow when a pull request is closed on the main branch
on:
  pull_request:
    types: [ closed ]
    branches: [ main ]

# Ensure only one workflow per branch is running at a time
concurrency:
  group: docker-build-${{ github.ref_name }}   # Group by branch name
  cancel-in-progress: true                     # Cancel any previous runs in progress

# Define permissions needed for the workflow
permissions:
  contents: write   # Allow writing to repository contents
  packages: write   # Allow pushing container images to registries

# Global environment variables
env:
  GO_VERSION: "1.24.4"    # Go version to use
  REGISTRY: ghcr.io       # Container registry URL

jobs:
  docker-build-and-push:
    # Run this job only if the PR was merged and branch starts with 'release/v'
    if: >
      ${{
        github.event.pull_request.merged == true &&
        startsWith(github.event.pull_request.head.ref, 'release/v')
      }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64   # Build for AMD64 architecture
          - linux/arm64   # Build for ARM64 architecture

    steps:
      # Checkout the main branch after merge
      - name: Checkout main (post-merge)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0  # Fetch full history

      # Determine the platform/architecture pair for tagging artifacts
      - name: Determine platform/arch
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      # Extract VERSION from the PR branch name (remove 'release/v' prefix)
      - name: Compute VERSION from head branch
        run: |
          set -euo pipefail
          BRANCH="${{ github.event.pull_request.head.ref }}"
          VERSION="${BRANCH#release/v}"
          if [[ -z "${VERSION}" || "${VERSION}" == "${BRANCH}" ]]; then
            echo "Error: can't extract VERSION from '${BRANCH}' (expecting prefix 'release/v')." >&2
            exit 1
          fi
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
          echo "Extracted VERSION=${VERSION}"

      # Install Go and enable caching
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Install Protocol Buffers compiler
      - name: Setup Protoc
        uses: arduino/setup-protoc@v3

      # Install Go protobuf plugins for code generation
      - name: Install Go protobuf plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          echo "$HOME/go/bin" >> "$GITHUB_PATH"  # Add Go bin directory to PATH

      # Build the project using the Makefile
      - name: Build with Makefile
        run: |
          set -euo pipefail
          make build-target
        env:
          VERSION: ${{ env.VERSION }}

      # Ensure build artifacts are executable
      - name: Apply execution permissions
        run: chmod +x build/* || true

      # Upload the built artifacts for later use
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ env.PLATFORM_PAIR }}
          path: build/*

      # Log in to the container registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up QEMU for cross-platform builds
      - name: Set up QEMU (for cross-platform emulation)
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

  tag-and-release:
    runs-on: ubuntu-latest
    needs: docker-build-and-push   # Wait for docker build to finish
    if: success()                  # Run only if previous job succeeded
    steps:
      # Checkout the main branch after merge
      - name: Checkout main (post-merge)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      # Extract VERSION from the PR branch name (remove 'release/v' prefix)
      - name: Compute VERSION from head branch
        run: |
          set -euo pipefail
          BRANCH="${{ github.event.pull_request.head.ref }}"
          VERSION="${BRANCH#release/v}"
          if [[ -z "${VERSION}" || "${VERSION}" == "${BRANCH}" ]]; then
            echo "Error: can't extract VERSION from '${BRANCH}' (expecting prefix 'release/v')." >&2
            exit 1
          fi
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
          echo "Extracted VERSION=${VERSION}"

      # Download all build artifacts from previous job
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts
          pattern: build-linux-*

      # Create and push a Git tag for the release
      - name: Create Git Tag
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${VERSION}" || true       # Ignore if tag exists
          git push origin "v${VERSION}" || true

      # Create a GitHub release and attach artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: |
            ðŸŽ‰ Release **v${{ env.VERSION }}**
          files: build-artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
